/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Controlador.GestionBD;
import Modelo.Cliente;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.TextStyle;
import java.util.Locale;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * 
 */
public class MostrarCliente extends javax.swing.JInternalFrame implements Ventana {

    /**
     * Creates new form MostrarCliente
     */
    public MostrarCliente() {
        initComponents();
    }

    public MostrarCliente(Cliente cliente) {
        initComponents();
        this.clienteActual = cliente;
        fotoPerfil = "./src/Imagenes/spartan_default_img.png";
        ImageIcon ii = new ImageIcon(fotoPerfil);
        Image image = ii.getImage();
        Image newimg = image.getScaledInstance(100,100, java.awt.Image.SCALE_SMOOTH);
        ii = new ImageIcon(newimg);
        lblImg.setIcon(ii);
        cargarDatos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        mniFoto = new javax.swing.JMenuItem();
        lblImg = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnPagar = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        txtDni = new javax.swing.JTextField();
        chkbActivo = new javax.swing.JCheckBox();
        txtNombre = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        txtTlf = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaObs = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        mniFoto.setText("Seleccionar Imagen");
        mniFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniFotoActionPerformed(evt);
            }
        });
        jPopupMenu1.add(mniFoto);

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Datos del Cliente");

        lblImg.setBackground(new java.awt.Color(255, 255, 255));
        lblImg.setComponentPopupMenu(jPopupMenu1);
        lblImg.setOpaque(true);

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnPagar.setText("Pagar");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        txtId.setEditable(false);

        txtDni.setEditable(false);

        txtaObs.setColumns(20);
        txtaObs.setRows(5);
        jScrollPane1.setViewportView(txtaObs);

        jLabel3.setText("Observaciones");

        jLabel1.setText("ID");

        jLabel2.setText("DNI");

        jLabel4.setText("Activo");

        jLabel5.setText("Nombre");

        jLabel6.setText("Apellidos");

        jLabel7.setText("Direcci√≥n");

        jLabel8.setText("Telefono");

        jLabel9.setText("Correo");

        jLabel10.setText("Importe");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBorrar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPagar))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTlf)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtCorreo))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addGap(14, 14, 14)
                                        .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDni, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chkbActivo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNombre)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtApellidos))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDireccion)))))
                        .addGap(21, 21, 21))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkbActivo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTlf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModificar)
                    .addComponent(btnBorrar)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPagar)
                    .addComponent(jLabel10))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
try {

            int resp = JOptionPane.showConfirmDialog(null, "Eliminar cliente",
                    "¬øQuieres eliminar el cliente: " + clienteActual.getNombre() + " ?", JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            switch (resp) {
                case 0:
                    GestionBD.borrarCliente(clienteActual.getDni());
                    JOptionPane.showMessageDialog(this, "Cliente borrado");
                    if(!clienteActual.getRuta_foto().equals("./src/Imagenes/spartan_default_img.png")){
                    File foto= new File(clienteActual.getRuta_foto());
                    foto.delete();
                    }
                    ((Main)getParent().getParent().getParent().getParent().getParent()).recargarHijos();
                    this.dispose();
                    break;
                case 1:

                    break;
                case 2:

            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error al borrar cliente: " + ex);
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        // TODO add your handling code here:
      String dni = clienteActual.getDni();
      
    /*  java.time.LocalDate fechaActual = java.time.LocalDate.now();
      String mesAno = String.format("%02d-%d", fechaActual.getMonthValue(), fechaActual.getYear());*/
        Month mes = LocalDate.now().getMonth();
        int ano = LocalDate.now().getYear();
        String nombre = mes.getDisplayName(TextStyle.FULL, new Locale("es", "ES"));
        String mes_ano=nombre+"-"+ano;
      double cantidad;
      try{
          cantidad = Double.parseDouble(jTextField8.getText().trim());
      }catch(NumberFormatException e){
          JOptionPane.showMessageDialog(this, "Ingresa una cantidad v√°lida");
          return;
      }
      
      int resultado = GestionBD.pagarMensualidad(dni, mes_ano, cantidad);
      
        switch (resultado) {
            case 0:
                JOptionPane.showMessageDialog(this, "Pago realzado");
                ((Main)getParent().getParent().getParent().getParent().getParent()).recargarHijos();
                break;
            case -1:
                JOptionPane.showMessageDialog(this, "No se ha encontrado mensualidad");
                break;
            case 1:
                JOptionPane.showMessageDialog(this,"Error al realizar el pago");
                break;
            default:
                JOptionPane.showMessageDialog(this, "Resultado inesperado");
                throw new AssertionError();
        }
    }//GEN-LAST:event_btnPagarActionPerformed

    private void mniFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniFotoActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setMultiSelectionEnabled(false);
        String extensions[] = {"jpg", "jpeg", "png"};
        jfc.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String path = f.getAbsolutePath().toLowerCase();
                    for (int i = 0, n = extensions.length; i < n; i++) {
                        String extension = extensions[i];
                        if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {
                            return true;
                        }
                    }
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "JPG, JPEG, PNG";
            }
        });
        
        int i = jfc.showOpenDialog(this);
        if (i == JFileChooser.APPROVE_OPTION) {
            fotoPerfil = "./src/Imagenes/" + jfc.getSelectedFile().getName();
            if (archivoRepetido(jfc.getSelectedFile().getName())) {
                JOptionPane.showMessageDialog(this, "Ya existe una imagen con ese nombre");
                return;
            }
            try (InputStream is = new FileInputStream(jfc.getSelectedFile());
                    OutputStream os = new FileOutputStream(new File(fotoPerfil))) {

                byte[] buffer = new byte[1024];
                int length;
                while ((length = is.read(buffer)) > 0) {
                    os.write(buffer, 0, length);
                }
                ImageIcon ii = new ImageIcon(fotoPerfil);
                Image image = ii.getImage();
                Image newimg = image.getScaledInstance(100,100, java.awt.Image.SCALE_SMOOTH);
                ii = new ImageIcon(newimg);
                lblImg.setIcon(ii);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error con imagen: " + ex);
            }
        } else {
                ImageIcon ii = new ImageIcon(fotoPerfil);
                Image image = ii.getImage();
                Image newimg = image.getScaledInstance(90, 95, java.awt.Image.SCALE_SMOOTH);
                ii = new ImageIcon(newimg);
                lblImg.setIcon(ii);
        }
    }//GEN-LAST:event_mniFotoActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here: 
        if(txtNombre.getText().isEmpty() || txtTlf.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Es obligatiorio poner el nombre y el telefono");
            return;
        }
        clienteActual.setNombre(txtNombre.getText());
        clienteActual.setApellidos(txtApellidos.getText());
        clienteActual.setDireccion(txtDireccion.getText());
        clienteActual.setTelefono(txtTlf.getText());
        clienteActual.setCorreo(txtCorreo.getText());
        clienteActual.setObservaciones(txtaObs.getText());
        clienteActual.setActivo(chkbActivo.isSelected());
        clienteActual.setRuta_foto(fotoPerfil);
        
        try {
            switch (GestionBD.modCliente(clienteActual)){
                case -1:
                    JOptionPane.showMessageDialog(this, "No existe ese cliente");
                    break;
                case 1:
                   JOptionPane.showMessageDialog(this, "Cliente modificado con exito"); 
                   ((Main)getParent().getParent().getParent().getParent().getParent()).recargarHijos();
                   break;
                case 0:
                    JOptionPane.showMessageDialog(this, "Error"); 
                    break;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error: "+ex);
        }
        
            //JOptionPane.showMessageDialog(this, mensaje);  
    }//GEN-LAST:event_btnModificarActionPerformed

    Cliente clienteActual;
    private String fotoPerfil;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnPagar;
    private javax.swing.JCheckBox chkbActivo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JLabel lblImg;
    private javax.swing.JMenuItem mniFoto;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTlf;
    private javax.swing.JTextArea txtaObs;
    // End of variables declaration//GEN-END:variables

    @Override
    public void recargarDatos() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void cargarDatos() {
        txtId.setText(clienteActual.getNum_cliente() + "");
        txtDni.setText(clienteActual.getDni());
        if (clienteActual.isActivo()) {
            chkbActivo.setSelected(true);
        } else {
            chkbActivo.setSelected(false);
        }
        txtNombre.setText(clienteActual.getNombre());
        txtApellidos.setText(clienteActual.getApellidos());
        txtDireccion.setText(clienteActual.getDireccion());
        txtTlf.setText(clienteActual.getTelefono());
        txtCorreo.setText(clienteActual.getCorreo());
        txtaObs.setText(clienteActual.getObservaciones());
        fotoPerfil = clienteActual.getRuta_foto();
        ImageIcon ii = new ImageIcon(fotoPerfil);
        Image image = ii.getImage();
        Image newimg = image.getScaledInstance(100, 100, java.awt.Image.SCALE_SMOOTH);
        ii = new ImageIcon(newimg);
        lblImg.setIcon(ii);
    }
    private boolean archivoRepetido(String name) {
        File carpeta = new File("./src/Imagenes");
        File[] archivos = carpeta.listFiles();
        for (File img : archivos) {
            if (img.getName().equals(name)) {
                return true;
            }
        }
        return false;
    }
}
